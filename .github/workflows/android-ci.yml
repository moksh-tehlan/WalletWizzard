name: Android Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: master

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Cache Gradle Wrapper
      - name: Cache Gradle Wrapper
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      # Cache Gradle Dependencies
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      # Cache Android build
      - name: Cache Android Build
        uses: actions/cache@v3
        with:
          path: |
            ~/.android/build-cache
            ~/.android/cache
          key: ${{ runner.os }}-android-cache-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-android-cache-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Create .env directory
        run: mkdir -p .env

      - name: Create .production file
        run: |
          echo "BASE_URL=\"${{ secrets.BASE_URL }}\"" > .env/.production
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> .env/.production
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> .env/.production
          echo "STORE_PASSWORD=${{ secrets.STORE_PASSWORD }}" >> .env/.production
          echo "STORE_FILE=${{ secrets.STORE_FILE }}" >> .env/.production
          echo "ENABLE_LOGGING=${{ secrets.ENABLE_LOGGING }}" >> .env/.production

      # Create app/keystores directory and decode the keystore file
      - name: Decode and create keystore
        run: |
          mkdir -p app/keystores
          echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 --decode > app/keystores/wallet-wizzard.jks

      # Decode and create google-services.json
      - name: Decode and create google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Configure Gradle for optimal CI performance
      - name: Configure Gradle properties
        run: |
          mkdir -p ~/.gradle
          echo "org.gradle.daemon=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.parallel=true" >> ~/.gradle/gradle.properties
          echo "org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError" >> ~/.gradle/gradle.properties
          echo "org.gradle.workers.max=2" >> ~/.gradle/gradle.properties

      - name: Build Release APK
        run: ./gradlew assembleProductionRelease --build-cache --parallel

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: app-release
          path: app/build/outputs/apk/production/release/app-production-release.apk

      - name: Send build to Slack
        uses: moksh-tehlan/slack-build-notify-action@v1.1.0
        with:
          slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: 'C086SMUA7B6'
          file-path: 'app/build/outputs/apk/production/release/app-production-release.apk'
          build-number: ${{ github.run_number }}
          build-status: ${{ job.status }}
          commit-url: ${{ github.event.head_commit.url }}
          message-title: 'ðŸš€ New Android Build'
          message-color: '#36a64f'
          app-name: 'Wallet Wizzard'
          file-comment: 'ðŸ“± Latest Production APK'

      - name: Display structure of build files
        run: ls -R app/build/outputs/apk/production/release/

      # Optional: Clean up caches if they get too large
      - name: Cleanup Gradle Cache
        # Remove older versions of dependencies
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties